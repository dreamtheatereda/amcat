############################################################################          (C) Vrije Universiteit, Amsterdam (the Netherlands)            ##                                                                         ## This file is part of AmCAT - The Amsterdam Content Analysis Toolkit     ##                                                                         ## AmCAT is free software: you can redistribute it and/or modify it under  ## the terms of the GNU Affero General Public License as published by the  ## Free Software Foundation, either version 3 of the License, or (at your  ## option) any later version.                                              ##                                                                         ## AmCAT is distributed in the hope that it will be useful, but WITHOUT    ## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or   ## FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public     ## License for more details.                                               ##                                                                         ## You should have received a copy of the GNU Affero General Public        ## License along with AmCAT.  If not, see <http://www.gnu.org/licenses/>.  ############################################################################from amcat.scripts import scriptfrom amcat.scripts import clifrom django.db.models import Min, Maxfrom amcat.model.medium import Mediumimport amcat.scripts.formsfrom amcat.tools.selection import solrlib, databasefrom django import formsimport logginglog = logging.getLogger(__name__)class ArticleSetStatisticsScript(script.Script):    input_type = None    options_form = amcat.scripts.forms.SelectionForm    output_type = script.ArticleSetStatistics    def run(self, input=None):        s = script.ArticleSetStatistics()        if self.options['useSolr'] == False: # make database query            qs = amcat.tools.selection.database.getQuerySet(**self.options)            s.articleCount = qs.count()            result = qs.aggregate(firstDate=Min('date'), lastDate=Max('date'))            s.firstDate = result['firstDate']            s.lastDate = result['lastDate']            mediumids = [x['medium_id'] for x in qs.values('medium_id').distinct()]            s.mediums = sorted(Medium.objects.in_bulk(mediumids).values(), key=lambda x:x.id) # TODO: there must be a more effcient way to get all distinct         else:            amcat.tools.selection.solrlib.getStats(s, self.options['query'], amcat.tools.selection.solrlib.createFilters(self.options))                    return s        if __name__ == '__main__':    cli.run_cli(ArticleSetStatisticsScript)